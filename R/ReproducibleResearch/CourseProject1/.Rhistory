df$intervals
df
df$intervals
head(df)
names(df)
row.names(df) <- c("avgsteps", "intervalnumbers")
col.names(df) <- c("avgsteps", "intervalnumbers")
colnames(df) <- c("avgsteps", "intervalnumbers")
names(df)
head(df)
colnames(df) <- c("avgsteps", "intervalnumbers")
colnames(df)
names(df)
df$avgsteps
df[['avgsteps'']]
'
df[['avgsteps']]
df[[avgsteps]]
avgsteps <- as.character(by(activity$steps,activity$interval,
FUN=mean, na.rm=TRUE))
intervalnumbers <- as.character(unique(activity$interval))
df <- cbind(avgsteps, intervalnumbers)
colnames(df) <- c("avgsteps", "intervalnumbers")
head(df)
avgsteps <- as.integer(by(activity$steps,activity$interval,
FUN=mean, na.rm=TRUE))
# Get the list of interval numbers
intervalnumbers <- as.integer(unique(activity$interval))
# Create a data frame in which each interval number
# is paired with its average number of steps
df <- cbind(avgsteps, intervalnumbers)
colnames(df) <- c("avgsteps", "intervalnumbers")
head(df)
avgsteps <- by(activity$steps,activity$interval,
FUN=mean, na.rm=TRUE)
# Get the list of interval numbers
intervalnumbers <- as.integer(unique(activity$interval))
# Create a data frame in which each interval number
# is paired with its average number of steps
df <- cbind(avgsteps, intervalnumbers)
colnames(df) <- c("avgsteps", "intervalnumbers")
df$avgsteps
typeof(df)
df <- as.data.frame(avgsteps)
typeof(avgsteps)
avgsteps <- as.numeric(by(activity$steps,activity$interval,
FUN=mean, na.rm=TRUE))
intervalnumbers <- as.numeric(unique(activity$interval))
df <- as.data.frame(avgsteps)
df
rbind(df, intervalnumbers)
head(df)
cbind(df, intervalnumbers)
df <- cbind(df, intervalnumbers)
typeof(df)
df <- as.data.frame(avgsteps)
typeof(df)
df <- cbind(df, intervalnumbers)
head(df)
df$avgsteps
max(df$avgsteps)
range(df$avgsteps)
maxsteps <- apply(df, 1, which.max)
maxsteps
maxsteps <- sapply(split(seq_len(nrow(df)), df$intervalnumbers), function(x) {
x[which.max(df$avgsteps[x])]})
maxsteps
which.max(df$avgsteps)
df$avgsteps[104]
cat("5-minute interval with maximum number of steps on average, across all days: ",
df$avgsteps[which.max(df$avgsteps)])
cat("5-minute interval with maximum number of steps on average, across all days: /p",
df$avgsteps[which.max(df$avgsteps)])
cat("5-minute interval with maximum number of steps on average, across all days: \\",
df$avgsteps[which.max(df$avgsteps)])
cat("5-minute interval with maximum number of steps on average, across all days: ",
df$intervalnumber[which.max(df$avgsteps)],", with ",
df$avgsteps[which.max(df$avgsteps)]), "steps .")
cat("5-minute interval with maximum number of steps on average, across all days: ",
df$intervalnumber[which.max(df$avgsteps)], " with ",
df$avgsteps[which.max(df$avgsteps)]), "steps .")
cat("5-minute interval with maximum number of steps on average, across all days: ",
df$intervalnumber[which.max(df$avgsteps)])
cat("5-minute interval with maximum number of steps on average: ",
df$intervalnumber[which.max(df$avgsteps)])
cat("5-minute interval with maximum number of steps on average: interval ",
df$intervalnumber[which.max(df$avgsteps)])
cat("5-minute interval with maximum number of steps on average: interval ",
df$intervalnumber[which.max(df$avgsteps)], "with")
cat("5-minute interval with maximum number of steps on average: interval ",
df$intervalnumber[which.max(df$avgsteps)], ", with ",
df$avgsteps[which.max(df$avgsteps)], " steps.")
cat("5-minute interval with maximum number of steps on average: interval",
df$intervalnumber[which.max(df$avgsteps)], "which has ",
df$avgsteps[which.max(df$avgsteps)], "steps.")
cat("5-minute interval with maximum number of steps on average: interval",
df$intervalnumber[which.max(df$avgsteps)], "which has",
df$avgsteps[which.max(df$avgsteps)], "steps.")
cat("5-minute interval with maximum number of steps on average: interval",
df$intervalnumber[which.max(df$avgsteps)], "which has an average of",
df$avgsteps[which.max(df$avgsteps)], "steps across all days.")
cat("5-minute interval with maximum number of steps on average: \n interval",
df$intervalnumber[which.max(df$avgsteps)], "which has an average of",
df$avgsteps[which.max(df$avgsteps)], "steps across all days.")
cat("5-minute interval with maximum number of steps on average: \n interval",
df$intervalnumber[which.max(df$avgsteps)], "\n which has an average of",
df$avgsteps[which.max(df$avgsteps)], "steps across all days.")
nrow(complete.cases(activity))
complete.cases(activity)
nrow(complete.cases(activity) == FALSE)
sapply(activity, function(x) sum(is.na(x)))
?is/na
?is.na
sapply(activity, is.na(x))
sum(!is.na(activity))
sum(is.na(activity))
is.na(activity)
sum(!is.na(activity))
sum(is.na(activity))
unique (unlist (lapply (activity, function (x) which (is.na (x)))))
unique (unlist (lapply (activity$steps, function (x) which (is.na (x)))))
colSums(is.na(activity))
colSums(is.na(activity)) < 2
remove.na(activity, iftell = TRUE)
install.packages("rgr")
remove.na(activity, iftell = TRUE)
library(rgr)
remove.na(activity, iftell = TRUE)
dim(activity)
sum(is.na(activity))
cat(sum(is.na(activity)), "rows contain NAs.")
cat(sum(is.na(activity)),
"rows in the data frame contain NAs.")
typeof(activity)
activity <- as.data.frame(activity)
totalsteps <- by(activity$steps,activity$date,FUN=sum,
na.rm=TRUE)
hist(totalsteps,
main="Total Steps Per Day",
xlab="Steps per day")
avgsteps <- as.numeric(by(activity$steps,activity$interval,
FUN=mean, na.rm=TRUE))
intervalnumbers <- as.numeric(unique(activity$interval))
df <- as.data.frame(avgsteps)
df <- cbind(df, intervalnumbers)
head(df)
cat("5-minute interval with maximum number of steps on average: \n interval",
df$intervalnumber[which.max(df$avgsteps)], "\n which has an average of",
df$avgsteps[which.max(df$avgsteps)], "steps across all days.")
cat(sum(is.na(activity)),
"rows in the data frame contain NAs.")
library(plyr)
df2 <- df
for (i in which(sapply(df2, is.numeric))) {
df2[is.na(df[, i]), i] <- mean(df[, i],  na.rm = TRUE)
}
head(df2)
head(df2[1:50])
head(df2[1:50,])
df2
activity <- read.csv("activity.csv")
activity <- as.data.frame(activity)
## What is mean total number of steps taken per day?
# Calculate the total number of steps taken per day
# (totalsteps is an array of integers)
totalsteps <- by(activity$steps,activity$date,FUN=sum,
na.rm=TRUE)
# Make a histogram of the total number of steps
# taken each day
hist(totalsteps,
main="Total Steps Per Day",
xlab="Steps per day")
# Calculate and report the mean of the
# total number of steps taken per day
cat("Mean total steps taken per day: ",
mean(totalsteps))
# Calculate and report the median of the
# total number of steps taken per day
cat("Median total steps taken per day: ",
median(totalsteps))
## What is the average daily activity pattern?
# Calculate the mean of steps taken per interval
# (intervals is an array of integers)
avgsteps <- as.numeric(by(activity$steps,activity$interval,
FUN=mean, na.rm=TRUE))
# Get the list of interval numbers
intervalnumber <- as.numeric(unique(activity$interval))
# Create a data frame in which each interval number
# is paired with its average number of steps
df <- as.data.frame(avgsteps)
df <- cbind(df, intervalnumber)
# Make a time series plot of the 5-minute interval
# (x-axis) and the average number of steps taken,
# averaged across all days (y-axis)
plot(avgsteps ~ intervalnumber, df, type="l",
main="Average Steps Taken Per Interval",
xlab="Intervals",
ylab="Average steps taken")
hist(totalsteps,
main="Total Steps Per Day",
xlab="Steps per day")
cat("Mean total steps taken per day: ",
mean(totalsteps))
cat("Median total steps taken per day: ",
median(totalsteps))
avgsteps <- as.numeric(by(activity$steps,activity$interval,
FUN=mean, na.rm=TRUE))
intervalnumber <- as.numeric(unique(activity$interval))
df <- as.data.frame(avgsteps)
df <- cbind(df, intervalnumber)
plot(avgsteps ~ intervalnumber, df, type="l",
main="Average Steps Taken Per Interval",
xlab="Intervals",
ylab="Average steps taken")
cat("5-minute interval with maximum number of steps on average: \n interval",
df$intervalnumber[which.max(df$avgsteps)], "\n which has an average of",
df$avgsteps[which.max(df$avgsteps)], "steps across all days.")
cat(sum(is.na(activity)),
"rows in the data frame contain NAs.")
impute.mean <- function(x) replace(x, is.na(x),
mean(x, na.rm = TRUE))
df2 <- ddply(df, ~ intervalnumber, transform,
steps = impute.mean(steps))
df2 <- ddply(df, ~ intervalnumber, transform,
steps = impute.mean(activity$steps))
head(df2)
head(df)
head(activity)
?replace
for (i in which(sapply(activity, is.numeric))) {
activity[is.na(activity[, i]), i] <- mean(activity[, i],  na.rm = TRUE)
}
head(activity)
activity <- as.data.frame(read.csv("activity.csv"))
df2 <- for (i in which(sapply(activity, is.numeric))) {
activity[is.na(activity[, i]), i] <- mean(activity[, i],  na.rm = TRUE)
}
head(df2)
df2 <- activity
for (i in which(sapply(activity, is.numeric))) {
df2[is.na(df2[, i]), i] <- mean(df2[, i],  na.rm = TRUE)
}
head(df2)
df2
df2[,1:50]
df2[1:2,1:50]
df2[1:2,]
df2[1:50,]
df2[1:100,]
head(df)
df2 <- activity
for (i in which(sapply(df2, is.numeric))) {
df2[is.na(df2[, i]), i] <- mean(df2[, i],  na.rm = TRUE)
}
head(df2)
df2
totalsteps2 <- by(df2$steps,df2$date,FUN=sum,
na.rm=TRUE)
hist(totalsteps2,
main="Total Steps Per Day",
xlab="Steps per day")
cat("Mean total steps taken per day: ",
mean(totalsteps2))
cat("Median total steps taken per day: ",
median(totalsteps2))
avgsteps <- as.numeric(by(df2$steps,df2$interval,
FUN=mean, na.rm=TRUE))
# Get the list of interval numbers
intervalnumber <- as.numeric(unique(df2$interval))
# Create a data frame in which each interval number
# is paired with its average number of steps
df <- as.data.frame(avgsteps)
df <- cbind(df, intervalnumber)
# Make a time series plot of the 5-minute interval
# (x-axis) and the average number of steps taken,
# averaged across all days (y-axis)
plot(avgsteps ~ intervalnumber, df, type="l",
main="Average Steps Taken Per Interval",
xlab="Intervals",
ylab="Average steps taken")
cat("5-minute interval with maximum number of steps on average: \n interval",
df$intervalnumber[which.max(df$avgsteps)], "\n which has an average of",
df$avgsteps[which.max(df$avgsteps)], "steps across all days.")
head(df)
df
head(activity)
activity <- as.data.frame(read.csv("activity.csv"))
activity2 <- ave(activity$steps,activity$interval,FUN=function(x){
mm <- mean(x,na.rm=TRUE)
ifelse(is.na(x),mm,x)
})
head(activity2)
activity2 <- activity
activity2$steps <- ave(activity2$steps,activity2$interval,FUN=function(x){
mm <- mean(x,na.rm=TRUE)
ifelse(is.na(x),mm,x)
})
head(activity2)
activity2
hist(totalsteps2,
main="Total Steps Per Day",
xlab="Steps per day")
cat("Mean total steps taken per day: ",
mean(totalsteps2))
# Calculate and report the median of the
# total number of steps taken per day
cat("Median total steps taken per day: ",
median(totalsteps2))
head(activity2)
totalsteps2 <- by(activity2$steps,activity2$date,FUN=sum,
na.rm=TRUE)
hist(totalsteps2,
main="Total Steps Per Day",
xlab="Steps per day")
cat("Mean total steps taken per day: ",
mean(totalsteps2))
cat("Median total steps taken per day: ",
median(totalsteps))
cat("Mean total steps taken per day: ",
mean(totalsteps))
avgsteps2 <- as.numeric(by(activity2$steps,activity2$interval,
FUN=mean, na.rm=TRUE))
intervalnumber2 <- as.numeric(unique(activity2$interval))
df2 <- as.data.frame(avgsteps2)
df2 <- cbind(df2, intervalnumber2)
head(df2)
plot(avgsteps2 ~ intervalnumber2, df2, type="l",
main="Average Steps Taken Per Interval",
xlab="Intervals",
ylab="Average steps taken")
plot(avgsteps2 ~ intervalnumber2, df2, type="l",
main="Average Steps Taken Per Interval",
xlab="Intervals",
ylab="Average steps taken")
cat("5-minute interval with maximum number of steps on average: \n interval",
df2$intervalnumber2[which.max(df2$avgsteps2)], "\n which has an average of",
df2$avgsteps2[which.max(df2$avgsteps2)], "steps across all days.")
activity$date <- as.POSIXlt(activity$date,format="%Y-%m-%d")
activity$date
?weekdays
weekdays(activity$date)
Sys.setlocale("LC_TIME", "en_US")
activity$date <- as.POSIXlt(activity$date,format="%Y-%m-%d")
weekdays(activity$date)
?weekend
?weekdays
?weekends
activity <- as.data.frame(read.csv("activity.csv"))
activity3 <- activity
?strftime
as.POSIXlt(activity3.$date)$wday
as.POSIXlt(activity3$date)$wday
activity3$daytype <- as.POSIXlt(activity3$date)$wday
head(activity3)
activity3$daytype[activity3$daytype > 0 && activity3$daytype < 6] <- "weekday"
head(activity3)
activity3$daytype[activity3$daytype == 0 | activity3$daytype == 6] <- "weekend"
weekdays <- activity3[activity3$daytype == "weekday"]
weekdays <- activity3[activity3$daytype == weekday]
activity3 <- activity2
activity3$daytype <- as.POSIXlt(activity3$date)$wday
activity3$daytype[activity3$daytype > 0 && activity3$daytype < 6] <- "weekday"
# Replace days 6 and 0 (Sat & Sun) with "weekend"
activity3$daytype[activity3$daytype == 0 | activity3$daytype == 6] <- "weekend"
head(activity3)
weekdays <- split(activity3, daytype(activity3[,4] == "weekday"))
typeof(activity3)
activity3 <- as.data.frame(activity2)
activity3$daytype <- as.POSIXlt(activity3$date)$wday
# Replace days 1 through 5 (Mon thru Fri) with "weekday"
activity3$daytype[activity3$daytype > 0 && activity3$daytype < 6] <- "weekday"
# Replace days 6 and 0 (Sat & Sun) with "weekend"
activity3$daytype[activity3$daytype == 0 | activity3$daytype == 6] <- "weekend"
typeof(activity3)
activity3[,1:5]
activity3[1:5,]
activity3[activity3$daytype=="weekday"]
activity3[,activity3$daytype=="weekday"]
activity3[activity3$daytype=="weekday",]
head(activity3[activity3$daytype=="weekday",])
weekdays <- activity3[activity3$daytype=="weekday",]
# And one for just weekends
weekends <- activity3[activity3$daytype=="weekend",]
head(weekends)
head(weekdays)
activity3
activity3
head(activity3)
activity3 <- activity2
activity3$daytype <- as.POSIXlt(activity3$date)$wday
head(activity3)
activity3$daytype
activity3$daytype[activity3$daytype == 0]
head(activity3$daytype[activity3$daytype == 0])
head(activity3[activity3$daytype == 0])
head(activity3[activity3$daytype = 0])
head(activity3$daytype[activity3$daytype == 0])
head(activity3[activity3$daytype > 0])
head(activity3$daytype[activity3$daytype == 0,])
head(activity3$daytype[activity3$daytype == 0])
head(activity3[activity3$daytype > 0,])
head(activity3[activity3$daytype == 0,])
head(activity3[activity3$daytype == 0 || activity3$daytype == 6,])
head(activity3[activity3$daytype == 0 | activity3$daytype == 6,])
activity3$daytype[activity3$daytype > 0 && activity3$daytype < 6] <- "weekday"
head(activity3[activity3$daytype == 0 | activity3$daytype == 6,])
head(activity3[activity3$daytype == 0,])
activity3 <- activity2
# Add a column with numbered days of the week
activity3$daytype <- as.POSIXlt(activity3$date)$wday
activity3$daytype[activity3$daytype != 0 && activity3$daytype != 6] <- "weekday"
# Replace days 6 and 0 (Sat & Sun) with "weekend"
activity3$daytype[activity3$daytype == 0 | activity3$daytype == 6] <- "weekend"
weekdays <- activity3[activity3$daytype=="weekday",]
head(weekdays)
head(weekends)
activity3 <- activity2
activity3$daytype <- as.POSIXlt(activity3$date)$wday
range(activity3$daytype)
activity3$daytype[activity3$daytype != 0 && activity3$daytype != 6] <- "weekday"
activity3$daytype
activity3 <- activity2
# Add a column with numbered days of the week
activity3$daytype <- as.POSIXlt(activity3$date)$wday
activity3$daytype[activity3$daytype == 0 | activity3$daytype == 6] <- "weekend"
activity3$daytype
# Replace days 1 through 5 (Mon thru Fri) with "weekday"
activity3$daytype[activity3$daytype != 0 && activity3$daytype != 6] <- "weekday"
activity3$daytype
activity3 <- activity2
# Add a column with numbered days of the week
activity3$daytype <- as.POSIXlt(activity3$date)$wday
activity3$daytype[activity3$daytype == 0 | activity3$daytype == 6] <- "weekend"
# Replace days 1 through 5 (Mon thru Fri) with "weekday"
activity3$daytype[activity3$daytype != "weekend"] <- "weekday"
weekdays <- activity3[activity3$daytype=="weekday",]
# And one for just weekends
weekends <- activity3[activity3$daytype=="weekend",]
head(weekdays)
head(weekends)
avgsteps_wd <- as.numeric(by(weekdays$steps,weekdays$date,
FUN=mean, na.rm=TRUE))
head(weekdays)
plot(avgsteps_wd ~ interval, weekdays, type="l",
main="Average Steps Taken Per Interval on Weekdays",
xlab="Intervals",
ylab="Average steps taken")
plot(avgsteps_wd ~ intervalnumber_wd, weekdays, type="l",
main="Average Steps Taken Per Interval on Weekdays",
xlab="Intervals",
ylab="Average steps taken")
intervalnumber_wd <- as.numeric(unique(weekdays$interval))
plot(avgsteps_wd ~ intervalnumber_wd, weekdays, type="l",
main="Average Steps Taken Per Interval on Weekdays",
xlab="Intervals",
ylab="Average steps taken")
intervalnumber_wd <- as.numeric(unique(weekdays$interval))
# Create a data frame in which each interval number
# is paired with its average number of steps
df_wd <- as.data.frame(avgsteps_wd)
df_wd <- cbind(df_wd, intervalnumber_wd)
df_wd <- as.data.frame(avgsteps_wd)
head(df_wd)
unique(weekdays$interval)
length(unique(weekdays$interval))
length(avgsteps_wd)
head(weekdays)
avgsteps_wd <- as.numeric(by(weekdays$steps,weekdays$interval,
FUN=mean, na.rm=TRUE))
length(avgsteps_wd)
df_wd <- as.data.frame(avgsteps_wd)
df_wd <- cbind(df_wd, intervalnumber_wd)
head(df_wd)
plot(avgsteps_wd ~ intervalnumber_wd, df_wd, type="l",
main="Average Steps Taken Per Interval on Weekdays",
xlab="Intervals",
ylab="Average steps taken")
plot(avgsteps_wd ~ intervalnumber_wd, df_wd, type="l",
main="Average Steps Taken Per Interval on Weekdays",
xlab="Intervals",
ylab="Average steps taken")
old.par <- par(mfrow=c(1, 2))
days.par <- par(mfrow=c(1, 2))
plot(avgsteps_wd ~ intervalnumber_wd, df_wd, type="l",
main="Average Steps Taken Per Interval on Weekdays",
xlab="Interval",
ylab="Average steps taken")
weekends <- activity3[activity3$daytype=="weekend",]
# Find the average number of steps for each interval
# across all weekdays
avgsteps_we <- as.numeric(by(weekends$steps,weekends$interval,
FUN=mean, na.rm=TRUE))
# Get the list of interval numbers
intervalnumber_we <- as.numeric(unique(weekends$interval))
# Create a data frame in which each interval number
# is paired with its average number of steps
df_we <- as.data.frame(avgsteps_we)
df_we <- cbind(df_we, intervalnumber_we)
plot(avgsteps_we ~ intervalnumber_we, df_we, type="l",
main="Average Steps Taken Per Interval on Weekends",
xlab="Interval",
ylab="Average steps taken")
days.par <- par(mfrow=c(1, 2))
# First make the plot for weekdays
plot(avgsteps_wd ~ intervalnumber_wd, df_wd, type="l",
main="Average Steps Taken Per \n Interval on Weekdays",
xlab="Interval",
ylab="Average steps taken")
plot(avgsteps_we ~ intervalnumber_we, df_we, type="l",
main="Average Steps Taken Per \n Interval on Weekends",
xlab="Interval",
ylab="Average steps taken")
